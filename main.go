package main

import (
	"context"
	"errors"
	"fmt"
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "lxq/docs" // docs is generated by Swag CLI, you have to import it.
)

// @title LXQ
// @version 1.0
// @description 这是一个项目描述
// @termsOfService http://swagger.io/terms/

// @contact.name LXQ项目API
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
func main() {
	router := gin.Default()
	// 一旦设置了参数NAME_OF_ENV_VARIABLE，则swagger请求返回404
	// swag init 生成swagger json
	router.GET("/swagger/*any", ginSwagger.DisablingWrapHandler(swaggerFiles.Handler, "NAME_OF_ENV_VARIABLE"))

	group(router)

	// @Router /post/{ids}/accounts/{account_id} [post]
	router.POST("/post", func(c *gin.Context) {
		ids := c.QueryMap("ids")
		names := c.PostFormMap("names")
		fmt.Printf("ids: %v; names: %v", ids, names)
	})

	srv := &http.Server{
		Addr:           ":8080",
		Handler:        router,
		ReadTimeout:    60 * time.Second,
		WriteTimeout:   60 * time.Second,
		IdleTimeout:    65 * time.Second,
		MaxHeaderBytes: 1 << 20,
	}

	go func() {
		if err := srv.ListenAndServe(); err != nil && errors.Is(err, http.ErrServerClosed) {
			log.Printf("listen:%s\n", err)
		}
	}()

	quit := make(chan os.Signal)
	// kill (no param) default send syscall.SIGTERM
	// kill -2 is syscall.SIGINT CTRL+C
	// kill -9 is syscall.SIGKILL but can't be catch, so don't need add it
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM, syscall.SIGSTOP)
	<-quit
	log.Println("Shutting down server...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal("Server forced to shutdown:", err)
	}
	log.Println("Server exiting")
}


func group(engine *gin.Engine) {
	v1 := engine.Group("/v1", func(c *gin.Context) {
		fmt.Println("/v1")
	})
	{

		v1.GET("/test1", func(c *gin.Context) {
			fmt.Println("/v1/test1")
			c.JSON(200, map[string]string{
				"junmo": "csq",
			})
		})
	}
}